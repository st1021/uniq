<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vc.thinker.cabbage.se.mapper.UserRebateLogMapper">
  <resultMap id="BaseResultMap" type="vc.thinker.cabbage.se.model.UserRebateLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="rebate_model" jdbcType="CHAR" property="rebateModel" />
    <result column="rebate_rate" jdbcType="DECIMAL" property="rebateRate" />
    <result column="rax_rate" jdbcType="DECIMAL" property="raxRate" />
    <result column="rebate_amount" jdbcType="DECIMAL" property="rebateAmount" />
    <result column="send_status" jdbcType="BIT" property="sendStatus" />
    <result column="send_time" jdbcType="TIMESTAMP" property="sendTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="order_code" jdbcType="VARCHAR" property="orderCode" />
    <result column="currency" jdbcType="VARCHAR" property="currency" />
    <result column="rebate_type" jdbcType="VARCHAR" property="rebateType" />
    <result column="pay_uid" jdbcType="BIGINT" property="payUid" />
    <result column="user_type" jdbcType="VARCHAR" property="userType" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BOResultMap" type="vc.thinker.cabbage.se.bo.UserRebateLogBO" />
  
  <resultMap id="CountStatsMap" type="vc.thinker.cabbage.stats.bo.CountStatsBO" />
  
  <select id="sumByCurrency" resultMap="BOResultMap">
  		select sum(rebate_amount) rebate_amount,currency from se_user_rebate_log GROUP BY currency  
  </select>
  
  <select id="findPageByAdmin" resultMap="BOResultMap">
  		select 
			l.* ,
			s.seller_name,s.contact_user_name,s.contact_mobile,
			r.referee_name,
			a.agent_name,
			u.nickname,u.mobile
		from  
			se_user_rebate_log l 
			INNER JOIN user_member u on l.pay_uid = u.uid
			left join user_seller s on l.uid = s.uid and l.user_type = 'seller'
		 	left join user_referee r on l.uid = r.uid and l.user_type = 'referee'
			left join user_agent a on l.uid = a.uid and l.user_type = 'agent'
		<where>
			<if test="null != vo.uid">
				and l.uid = #{vo.uid}
			</if>
			<if test="null != vo.userType and '' != vo.userType">
				and l.user_type = #{vo.userType}
			</if>
			<if test="null != vo.sellerName and '' != vo.sellerName">
				and s.seller_name like concat ('%', #{vo.sellerName}, '%')
			</if>
			<if test="null != vo.refereeName and '' != vo.refereeName">
				and r.referee_name like concat ('%', #{vo.refereeName}, '%')
			</if>
			<if test="null != vo.agentName and '' != vo.agentName">
				and a.agent_name like concat ('%', #{vo.agentName}, '%')
			</if>
			<if test="vo.startTime != null and vo.startTime != ''">
  				and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.startTime} ,'%Y-%m-%d')
  			</if>
  			<if test="vo.endTime != null and vo.endTime != ''">
  				and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endTime} ,'%Y-%m-%d')
  			</if>
		</where>
  </select>
  
  <select id="findPageByReferee" resultMap="BOResultMap">
  		select 
			l.*,
			a.referee_name refereeName,a.mobile,a.country
		from 
			se_user_rebate_log l 
			INNER JOIN user_referee a on l.uid = a.uid 
		<where>
		 <if test="null != vo.uid">
		 	and l.uid = #{vo.uid}
		 </if>
		 <if test="null != vo.rebateType and '' != vo.rebateType">
				and l.rebate_type = #{vo.rebateType}
			</if>
		 <if test="null != vo.orderCode and '' != vo.orderCode">
		 	and l.order_code like concat ("%" ,#{vo.orderCode} ,"%")
		 </if>
		 <if test="null != vo.refereeName and '' != vo.refereeName">
		 	and a.referee_name like concat ("%" ,#{vo.refereeName} ,"%")
		 </if>
		 <if test="null != vo.mobile and '' != vo.mobile">
		 	and a.mobile like concat ("%" ,#{vo.mobile} ,"%")
		 </if>
		 <if test="vo.beginDate != null and vo.beginDate != ''">
    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.beginDate} ,'%Y-%m-%d')
    	 </if>
    	 <if test="vo.endDate != null and vo.endDate != ''">
    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endDate} ,'%Y-%m-%d')
    	 </if>
		 </where>
		 order by l.create_time desc 
  </select>
  
  <select id="findPageByAgent" resultMap="BOResultMap">
  		select 
			l.*,
			a.agent_name agentName,a.mobile,a.country
		from 
			se_user_rebate_log l 
			INNER JOIN user_agent a on l.uid = a.uid 
		 <where>
		 <if test="null != vo.uid">
		 	and l.uid = #{vo.uid}
		 </if>
		 <if test="null != vo.rebateType and '' != vo.rebateType">
				and l.rebate_type = #{vo.rebateType}
			</if>
		 <if test="null != vo.orderCode and '' != vo.orderCode">
		 	and l.order_code like concat ("%" ,#{vo.orderCode} ,"%")
		 </if>
		 <if test="null != vo.agentName and '' != vo.agentName">
		 	and a.agent_name like concat ("%" ,#{vo.agentName} ,"%")
		 </if>
		 <if test="null != vo.mobile and '' != vo.mobile">
		 	and a.mobile like concat ("%" ,#{vo.mobile} ,"%")
		 </if>
		 <if test="vo.beginDate != null and vo.beginDate != ''">
    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.beginDate} ,'%Y-%m-%d')
    	 </if>
    	 <if test="vo.endDate != null and vo.endDate != ''">
    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endDate} ,'%Y-%m-%d')
    	 </if>
		 </where>
		 order by l.create_time desc 
  </select>
  
  <select id="agentIncomeStats" resultMap="BOResultMap">
  		select 
  			s.agent_name agentName,
  			sum(l.rebate_amount) rebateAmount  
  		from  
  			se_user_rebate_log l INNER JOIN user_agent s on l.uid = s.uid
  			<where>
  			<if test="null != vo.currency and '' != vo.currency">
  				and l.currency = #{vo.currency}
  			</if>
  			<if test="null != vo.gtTime">
				and l.create_time <![CDATA[ >= ]]> #{vo.gtTime}
			</if>
			<if test="vo.startTime != null and vo.startTime != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.startTime} ,'%Y-%m-%d')
	    	</if>
	    	<if test="vo.endTime != null and vo.endTime != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endTime} ,'%Y-%m-%d')
	    	</if>
  			</where>
			group by l.uid 
			order by rebateAmount 
			limit #{vo.limitNum}	
  </select>
  	
  <select id="refereeIncomeStats" resultMap="BOResultMap">
  		select 
  			s.referee_name refereeName,
  			sum(l.rebate_amount) rebateAmount  
  		from  
  			se_user_rebate_log l INNER JOIN user_referee s on l.uid = s.uid
  		<where>
  			<if test="null != vo.currency and '' != vo.currency">
  				and l.currency = #{vo.currency}
  			</if>
  			<if test="null != vo.gtTime">
				and l.create_time <![CDATA[ >= ]]> #{vo.gtTime}
			</if>
			<if test="vo.startTime != null and vo.startTime != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.startTime} ,'%Y-%m-%d')
	    	</if>
	    	<if test="vo.endTime != null and vo.endTime != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endTime} ,'%Y-%m-%d')
	    	</if>
  		</where>
  		group by l.uid
  		order by rebateAmount 
  		limit #{vo.limitNum}
  	
  </select>
  
  <select id="sellerIncomeStats" resultMap="BOResultMap">
  		select 
  			s.seller_name  sellerName  ,
  			sum(l.rebate_amount) rebateAmount  
  		from  
  			se_user_rebate_log l INNER JOIN user_seller s on l.uid = s.uid
  			<where>
  			<if test="null != vo.currency and '' != vo.currency">
  				and l.currency = #{vo.currency}
  			</if>
  			<if test="null != vo.gtTime">
				and l.create_time <![CDATA[ >= ]]> #{vo.gtTime}
			</if>
			<if test="vo.startTime != null and vo.startTime != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.startTime} ,'%Y-%m-%d')
	    	</if>
	    	<if test="vo.endTime != null and vo.endTime != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endTime} ,'%Y-%m-%d')
	    	</if>
  			</where>
  		group by l.uid
  		order by rebateAmount 
  		limit #{vo.limitNum}
  		
  </select>
  
  <select id="findPageByVo" resultMap="BOResultMap">
  	select 
		l.*,
		u.country,
		um.nickname
	from 
  		se_user_rebate_log l 
		left join sys_user u on l.uid = u.id
		left join user_member um on um.uid = l.pay_Uid
		<where>
			<if test="null != vo.uid and '' != vo.uid">
				and l.uid = #{vo.uid}
			</if>
			<if test="null != vo.rebateType and '' != vo.rebateType">
				and l.rebate_type = #{vo.rebateType}
			</if>
			<if test="null != vo.nickname and '' != vo.nickname">
				and um.nickname like concat ('%', #{vo.nickname}, '%')
			</if>
			<if test="vo.beginDate != null and vo.beginDate != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.beginDate} ,'%Y-%m-%d')
	    	</if>
	    	<if test="vo.endDate != null and vo.endDate != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endDate} ,'%Y-%m-%d')
	    	</if>
		</where>
  		
  		order by l.create_time desc
  </select>
  
  <select id="findPageBySeller" resultMap="BOResultMap">
  	select 
		l.*,
		s.country,
		s.seller_name sellerName,
		s.contact_mobile concatMobile,
		s.contact_user_name concatUserName
		
	from 
  		se_user_rebate_log l 
		INNER join user_seller s on l.uid = s.uid
		<where>
			<if test="null != vo.uid and '' != vo.uid">
				and l.uid = #{vo.uid}
			</if>
			<if test="null != vo.rebateType and '' != vo.rebateType">
				and l.rebate_type = #{vo.rebateType}
			</if>
			<if test="null != vo.sellerName and '' != vo.sellerName">
				and s.seller_name like concat ('%', #{vo.sellerName}, '%')
			</if>
			<if test="null != vo.concatMobile and '' != vo.concatMobile">
				and s.contact_mobile like concat ('%', #{vo.concatMobile}, '%')
			</if>
			<if test="null != vo.concatUserName and '' != vo.concatUserName">
				and s.concatUserName like concat ('%', #{vo.concatUserName}, '%')
			</if>
			<if test="vo.beginDate != null and vo.beginDate != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.beginDate} ,'%Y-%m-%d')
	    	</if>
	    	<if test="vo.endDate != null and vo.endDate != ''">
	    		and DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endDate} ,'%Y-%m-%d')
	    	</if>
		</where>
  		
  		order by l.create_time desc
  </select>
  
  <select id="findRebateStats" resultMap="CountStatsMap">
		SELECT
		<if test="vo.statsType!=null and vo.statsType==&quot;1&quot; ">
			DATE_FORMAT(create_time, '%m') AS statsTime,
		</if>
		<if test="vo.statsType!=null and vo.statsType==&quot;2&quot; ">
			DATE_FORMAT(create_time, '%d') AS statsTime,
		</if>
		sum(log_amount) AS consume
		FROM
		user_money_log
		WHERE  log_type = 'order_rebate'
		<if test="vo.statsType!=null and vo.statsType==&quot;1&quot; ">
		and	DATE_FORMAT(create_time, '%Y') = #{vo.time}
		</if>
		<if test="vo.statsType!=null and vo.statsType==&quot;2&quot; ">
		and	DATE_FORMAT(create_time, '%Y-%m') = #{vo.time}
		</if>
		and log_user_id = #{vo.sellerId}
		GROUP BY
		statsTime
		ORDER BY
		statsTime
	</select>
	
	<select id="sumRebate" resultType="java.math.BigDecimal">
	select sum(log_amount) from user_money_log
  where log_user_id = #{uid} and log_type = 'order_rebate'
 	<if test="date != null and date != ''">
	AND DATE_FORMAT(create_time,'%Y-%m-%d') <![CDATA[ = ]]> DATE_FORMAT(#{date},'%Y-%m-%d')
	</if>
	</select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, uid, order_id, rebate_model, rebate_rate, rax_rate, rebate_amount, send_status, 
    send_time, create_time, order_code, currency, rebate_type, pay_uid, user_type
  </sql>
  <select id="selectByExample" parameterType="vc.thinker.cabbage.se.model.UserRebateLogExample" resultMap="BOResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from se_user_rebate_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      limit ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BOResultMap">
    select 
    <include refid="Base_Column_List" />
    from se_user_rebate_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from se_user_rebate_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="vc.thinker.cabbage.se.model.UserRebateLogExample">
    delete from se_user_rebate_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="vc.thinker.cabbage.se.model.UserRebateLog" useGeneratedKeys="true">
    insert into se_user_rebate_log (id, uid, order_id, 
      rebate_model, rebate_rate, rax_rate, 
      rebate_amount, send_status, send_time, 
      create_time, order_code, currency, 
      rebate_type, pay_uid, user_type
      )
    values (#{id,jdbcType=BIGINT}, #{uid,jdbcType=BIGINT}, #{orderId,jdbcType=BIGINT}, 
      #{rebateModel,jdbcType=CHAR}, #{rebateRate,jdbcType=DECIMAL}, #{raxRate,jdbcType=DECIMAL}, 
      #{rebateAmount,jdbcType=DECIMAL}, #{sendStatus,jdbcType=BIT}, #{sendTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{orderCode,jdbcType=VARCHAR}, #{currency,jdbcType=VARCHAR}, 
      #{rebateType,jdbcType=VARCHAR}, #{payUid,jdbcType=BIGINT}, #{userType,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="vc.thinker.cabbage.se.model.UserRebateLog" useGeneratedKeys="true">
    insert into se_user_rebate_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="rebateModel != null">
        rebate_model,
      </if>
      <if test="rebateRate != null">
        rebate_rate,
      </if>
      <if test="raxRate != null">
        rax_rate,
      </if>
      <if test="rebateAmount != null">
        rebate_amount,
      </if>
      <if test="sendStatus != null">
        send_status,
      </if>
      <if test="sendTime != null">
        send_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="orderCode != null">
        order_code,
      </if>
      <if test="currency != null">
        currency,
      </if>
      <if test="rebateType != null">
        rebate_type,
      </if>
      <if test="payUid != null">
        pay_uid,
      </if>
      <if test="userType != null">
        user_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="rebateModel != null">
        #{rebateModel,jdbcType=CHAR},
      </if>
      <if test="rebateRate != null">
        #{rebateRate,jdbcType=DECIMAL},
      </if>
      <if test="raxRate != null">
        #{raxRate,jdbcType=DECIMAL},
      </if>
      <if test="rebateAmount != null">
        #{rebateAmount,jdbcType=DECIMAL},
      </if>
      <if test="sendStatus != null">
        #{sendStatus,jdbcType=BIT},
      </if>
      <if test="sendTime != null">
        #{sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderCode != null">
        #{orderCode,jdbcType=VARCHAR},
      </if>
      <if test="currency != null">
        #{currency,jdbcType=VARCHAR},
      </if>
      <if test="rebateType != null">
        #{rebateType,jdbcType=VARCHAR},
      </if>
      <if test="payUid != null">
        #{payUid,jdbcType=BIGINT},
      </if>
      <if test="userType != null">
        #{userType,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="vc.thinker.cabbage.se.model.UserRebateLogExample" resultType="java.lang.Integer">
    select count(*) from se_user_rebate_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update se_user_rebate_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.rebateModel != null">
        rebate_model = #{record.rebateModel,jdbcType=CHAR},
      </if>
      <if test="record.rebateRate != null">
        rebate_rate = #{record.rebateRate,jdbcType=DECIMAL},
      </if>
      <if test="record.raxRate != null">
        rax_rate = #{record.raxRate,jdbcType=DECIMAL},
      </if>
      <if test="record.rebateAmount != null">
        rebate_amount = #{record.rebateAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.sendStatus != null">
        send_status = #{record.sendStatus,jdbcType=BIT},
      </if>
      <if test="record.sendTime != null">
        send_time = #{record.sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.orderCode != null">
        order_code = #{record.orderCode,jdbcType=VARCHAR},
      </if>
      <if test="record.currency != null">
        currency = #{record.currency,jdbcType=VARCHAR},
      </if>
      <if test="record.rebateType != null">
        rebate_type = #{record.rebateType,jdbcType=VARCHAR},
      </if>
      <if test="record.payUid != null">
        pay_uid = #{record.payUid,jdbcType=BIGINT},
      </if>
      <if test="record.userType != null">
        user_type = #{record.userType,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update se_user_rebate_log
    set id = #{record.id,jdbcType=BIGINT},
      uid = #{record.uid,jdbcType=BIGINT},
      order_id = #{record.orderId,jdbcType=BIGINT},
      rebate_model = #{record.rebateModel,jdbcType=CHAR},
      rebate_rate = #{record.rebateRate,jdbcType=DECIMAL},
      rax_rate = #{record.raxRate,jdbcType=DECIMAL},
      rebate_amount = #{record.rebateAmount,jdbcType=DECIMAL},
      send_status = #{record.sendStatus,jdbcType=BIT},
      send_time = #{record.sendTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      order_code = #{record.orderCode,jdbcType=VARCHAR},
      currency = #{record.currency,jdbcType=VARCHAR},
      rebate_type = #{record.rebateType,jdbcType=VARCHAR},
      pay_uid = #{record.payUid,jdbcType=BIGINT},
      user_type = #{record.userType,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vc.thinker.cabbage.se.model.UserRebateLog">
    update se_user_rebate_log
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=BIGINT},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=BIGINT},
      </if>
      <if test="rebateModel != null">
        rebate_model = #{rebateModel,jdbcType=CHAR},
      </if>
      <if test="rebateRate != null">
        rebate_rate = #{rebateRate,jdbcType=DECIMAL},
      </if>
      <if test="raxRate != null">
        rax_rate = #{raxRate,jdbcType=DECIMAL},
      </if>
      <if test="rebateAmount != null">
        rebate_amount = #{rebateAmount,jdbcType=DECIMAL},
      </if>
      <if test="sendStatus != null">
        send_status = #{sendStatus,jdbcType=BIT},
      </if>
      <if test="sendTime != null">
        send_time = #{sendTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderCode != null">
        order_code = #{orderCode,jdbcType=VARCHAR},
      </if>
      <if test="currency != null">
        currency = #{currency,jdbcType=VARCHAR},
      </if>
      <if test="rebateType != null">
        rebate_type = #{rebateType,jdbcType=VARCHAR},
      </if>
      <if test="payUid != null">
        pay_uid = #{payUid,jdbcType=BIGINT},
      </if>
      <if test="userType != null">
        user_type = #{userType,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="vc.thinker.cabbage.se.model.UserRebateLog">
    update se_user_rebate_log
    set uid = #{uid,jdbcType=BIGINT},
      order_id = #{orderId,jdbcType=BIGINT},
      rebate_model = #{rebateModel,jdbcType=CHAR},
      rebate_rate = #{rebateRate,jdbcType=DECIMAL},
      rax_rate = #{raxRate,jdbcType=DECIMAL},
      rebate_amount = #{rebateAmount,jdbcType=DECIMAL},
      send_status = #{sendStatus,jdbcType=BIT},
      send_time = #{sendTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      order_code = #{orderCode,jdbcType=VARCHAR},
      currency = #{currency,jdbcType=VARCHAR},
      rebate_type = #{rebateType,jdbcType=VARCHAR},
      pay_uid = #{payUid,jdbcType=BIGINT},
      user_type = #{userType,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>