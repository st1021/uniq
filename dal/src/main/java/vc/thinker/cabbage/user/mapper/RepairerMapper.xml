<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vc.thinker.cabbage.user.mapper.RepairerMapper">
  <resultMap id="BaseResultMap" type="vc.thinker.cabbage.user.model.Repairer">
    <id column="uid" jdbcType="BIGINT" property="uid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="country" jdbcType="VARCHAR" property="country" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="head_img_path" jdbcType="VARCHAR" property="headImgPath" />
    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="area_id" jdbcType="VARCHAR" property="areaId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BOResultMap" type="vc.thinker.cabbage.user.bo.RepairerBO" />
  
  <select id="findByUids" resultMap="BOResultMap">
  		select * from user_repairer 
  		where uid in 
  		<foreach close=")" collection="uidList" item="item" open="(" separator=",">
          #{item}
      </foreach>
  </select>
  
  <select id="findDetailInfo" resultMap="BOResultMap">
  		 select r.*,so1.name companyName,so2.name officeName,u.company_id companyId,u.office_id officeId
  		 from (select * from user_repairer where uid = #{uid,jdbcType=BIGINT}) r 
  		 INNER JOIN sys_user u on r.uid = u.id 
  		 left join sys_office so1 on u.company_id = so1.id 
  		 left join sys_office so2 on u.office_id = so2.id
  </select>
  
  
  <select id="findPageByVo" resultMap="BOResultMap">
  		select 
  			r.*, so1.name companyName, so2.name officeName
  		from 
  			 ( select * from user_repairer 
  			 	<where>
			  		<if test="null != vo.mobile and '' != vo.mobile">
			  			mobile like CONCAT("%",#{vo.mobile},"%") 
			  		</if>
			  		<if test="null != vo.name and '' != vo.name">
			  			and name like CONCAT("%",#{vo.name},"%") 
			  		</if>
			  		<if test="null != vo.status and '' != vo.status">
			  			and status = ${vo.status}
			  		</if>
			  		<if test="null != vo.country and '' != vo.country">
			  			and country = #{vo.country}
			  		</if>
		  		</where>
  			 ) r 
  			 INNER JOIN sys_user u on r.uid = u.id 
  			 left join sys_office so1 on u.company_id = so1.id 
  			 left join sys_office so2 on u.office_id = so2.id
  			 order by r.create_time desc 
  </select>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, name, country, sex, head_img_path, mobile, status, area_id, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="vc.thinker.cabbage.user.model.RepairerExample" resultMap="BOResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_repairer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      limit ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BOResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_repairer
    where uid = #{uid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_repairer
    where uid = #{uid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="vc.thinker.cabbage.user.model.RepairerExample">
    delete from user_repairer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="vc.thinker.cabbage.user.model.Repairer">
    insert into user_repairer (uid, name, country, 
      sex, head_img_path, mobile, 
      status, area_id, create_time, 
      update_time)
    values (#{uid,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{country,jdbcType=VARCHAR}, 
      #{sex,jdbcType=INTEGER}, #{headImgPath,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{areaId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="vc.thinker.cabbage.user.model.Repairer">
    insert into user_repairer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="country != null">
        country,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="headImgPath != null">
        head_img_path,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="areaId != null">
        area_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="country != null">
        #{country,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="headImgPath != null">
        #{headImgPath,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        #{areaId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="vc.thinker.cabbage.user.model.RepairerExample" resultType="java.lang.Integer">
    select count(*) from user_repairer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_repairer
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.country != null">
        country = #{record.country,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.headImgPath != null">
        head_img_path = #{record.headImgPath,jdbcType=VARCHAR},
      </if>
      <if test="record.mobile != null">
        mobile = #{record.mobile,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.areaId != null">
        area_id = #{record.areaId,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_repairer
    set uid = #{record.uid,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      country = #{record.country,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      head_img_path = #{record.headImgPath,jdbcType=VARCHAR},
      mobile = #{record.mobile,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      area_id = #{record.areaId,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vc.thinker.cabbage.user.model.Repairer">
    update user_repairer
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="country != null">
        country = #{country,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="headImgPath != null">
        head_img_path = #{headImgPath,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="areaId != null">
        area_id = #{areaId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where uid = #{uid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="vc.thinker.cabbage.user.model.Repairer">
    update user_repairer
    set name = #{name,jdbcType=VARCHAR},
      country = #{country,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      head_img_path = #{headImgPath,jdbcType=VARCHAR},
      mobile = #{mobile,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      area_id = #{areaId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where uid = #{uid,jdbcType=BIGINT}
  </update>
</mapper>