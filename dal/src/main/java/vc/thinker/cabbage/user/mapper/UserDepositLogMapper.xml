<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vc.thinker.cabbage.user.mapper.UserDepositLogMapper">
  <resultMap id="BaseResultMap" type="vc.thinker.cabbage.user.model.UserDepositLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="type" jdbcType="CHAR" property="type" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="deal_by" jdbcType="BIGINT" property="dealBy" />
    <result column="check_time" jdbcType="TIMESTAMP" property="checkTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="out_trade_no" jdbcType="VARCHAR" property="outTradeNo" />
    <result column="out_refund_no" jdbcType="VARCHAR" property="outRefundNo" />
    <result column="refund_id" jdbcType="VARCHAR" property="refundId" />
    <result column="pay_mark" jdbcType="VARCHAR" property="payMark" />
    <result column="refund_account" jdbcType="VARCHAR" property="refundAccount" />
    <result column="currency" jdbcType="VARCHAR" property="currency" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BOResultMap" type="vc.thinker.cabbage.user.bo.UserDepositLogBO" />
  
  <resultMap id="CountStatsMap" type="vc.thinker.cabbage.stats.bo.CountStatsBO" />
  
  <select id="findDepositStats" resultMap="CountStatsMap">
  		SELECT
			<if test="vo.statsType!=null and vo.statsType==&quot;1&quot; ">
				DATE_FORMAT(create_time, '%m') AS statsTime,
			</if>
			<if test="vo.statsType!=null and vo.statsType==&quot;2&quot; ">
				DATE_FORMAT(create_time, '%d') AS statsTime,
			</if>
			sum(amount) deposit,currency
		FROM
			user_deposit_log
		WHERE
		<if test="vo.statsType!=null and vo.statsType==&quot;1&quot; ">
			DATE_FORMAT(create_time, '%Y') = #{vo.time}
		</if>
		<if test="vo.statsType!=null and vo.statsType==&quot;2&quot; ">
			DATE_FORMAT(create_time, '%Y-%m') = #{vo.time}
		</if>
		GROUP BY
		statsTime ,currency
		ORDER BY
		statsTime
  </select>
  
  <select id="selectPageByUid" resultMap="BOResultMap">
  		select 
  			log.*,us.nickname,us.mobile 
  		from 
  			user_deposit_log log left join user_member us on log.uid = us.uid 
  		<where>
  			<if test="vo.payMark != null and '' != vo.payMark">
  				and pay_mark = #{vo.payMark}
  			</if>
  			<if test="vo.mark != null and vo.mark == '01'">
  				and log.type != '1'
  			</if>
  			
  			<if test="vo.uid != null and vo.uid != ''">
  				and log.uid = #{vo.uid}
  			</if>
  			
  			<if test="vo.nickname != null and vo.nickname != ''">
  				and us.nickname  like concat('%', #{vo.nickname}, '%')
  			</if>
  			
  			<if test="vo.mobile != null and vo.mobile != ''">
  				and us.mobile  like concat('%', #{vo.mobile}, '%')
  			</if>
  			
  			<if test="vo.type != null and vo.type != ''">
  				and log.type = #{vo.type}
  			</if>
  			
  			<if test="vo.startTime != null and vo.startTime != ''">
	    		and DATE_FORMAT(trip.pay_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.startTime} ,'%Y-%m-%d')
	    	</if>
	    	
	    	<if test="vo.endTime != null and vo.endTime != ''">
	    		and DATE_FORMAT(trip.pay_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endTime} ,'%Y-%m-%d')
	    	</if>
	    </where> 	
  		order by log.create_time desc 
  </select>
  <select id="findPageByVO" resultMap="BOResultMap">
  	select * from user_deposit_log l
  	where 1=1
  	<if test="vo.uid != null">
  	and l.uid=#{vo.uid}
  	</if>
  	<if test="vo.ltdate != null">
  	<![CDATA[AND l.create_time < #{vo.ltdate}]]>
  	</if>
  	order by l.create_time desc
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, uid, amount, type, create_time, update_time, deal_by, check_time, remark, out_trade_no, 
    out_refund_no, refund_id, pay_mark, refund_account, currency
  </sql>
  <select id="selectByExample" parameterType="vc.thinker.cabbage.user.model.UserDepositLogExample" resultMap="BOResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_deposit_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      limit ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BOResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_deposit_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_deposit_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="vc.thinker.cabbage.user.model.UserDepositLogExample">
    delete from user_deposit_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="vc.thinker.cabbage.user.model.UserDepositLog" useGeneratedKeys="true">
    insert into user_deposit_log (id, uid, amount, 
      type, create_time, update_time, 
      deal_by, check_time, remark, 
      out_trade_no, out_refund_no, refund_id, 
      pay_mark, refund_account, currency
      )
    values (#{id,jdbcType=BIGINT}, #{uid,jdbcType=BIGINT}, #{amount,jdbcType=DECIMAL}, 
      #{type,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{dealBy,jdbcType=BIGINT}, #{checkTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR}, 
      #{outTradeNo,jdbcType=VARCHAR}, #{outRefundNo,jdbcType=VARCHAR}, #{refundId,jdbcType=VARCHAR}, 
      #{payMark,jdbcType=VARCHAR}, #{refundAccount,jdbcType=VARCHAR}, #{currency,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="vc.thinker.cabbage.user.model.UserDepositLog" useGeneratedKeys="true">
    insert into user_deposit_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="dealBy != null">
        deal_by,
      </if>
      <if test="checkTime != null">
        check_time,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="outTradeNo != null">
        out_trade_no,
      </if>
      <if test="outRefundNo != null">
        out_refund_no,
      </if>
      <if test="refundId != null">
        refund_id,
      </if>
      <if test="payMark != null">
        pay_mark,
      </if>
      <if test="refundAccount != null">
        refund_account,
      </if>
      <if test="currency != null">
        currency,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        #{type,jdbcType=CHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealBy != null">
        #{dealBy,jdbcType=BIGINT},
      </if>
      <if test="checkTime != null">
        #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="outTradeNo != null">
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="outRefundNo != null">
        #{outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="refundId != null">
        #{refundId,jdbcType=VARCHAR},
      </if>
      <if test="payMark != null">
        #{payMark,jdbcType=VARCHAR},
      </if>
      <if test="refundAccount != null">
        #{refundAccount,jdbcType=VARCHAR},
      </if>
      <if test="currency != null">
        #{currency,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="vc.thinker.cabbage.user.model.UserDepositLogExample" resultType="java.lang.Integer">
    select count(*) from user_deposit_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_deposit_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dealBy != null">
        deal_by = #{record.dealBy,jdbcType=BIGINT},
      </if>
      <if test="record.checkTime != null">
        check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.outTradeNo != null">
        out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="record.outRefundNo != null">
        out_refund_no = #{record.outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="record.refundId != null">
        refund_id = #{record.refundId,jdbcType=VARCHAR},
      </if>
      <if test="record.payMark != null">
        pay_mark = #{record.payMark,jdbcType=VARCHAR},
      </if>
      <if test="record.refundAccount != null">
        refund_account = #{record.refundAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.currency != null">
        currency = #{record.currency,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_deposit_log
    set id = #{record.id,jdbcType=BIGINT},
      uid = #{record.uid,jdbcType=BIGINT},
      amount = #{record.amount,jdbcType=DECIMAL},
      type = #{record.type,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      deal_by = #{record.dealBy,jdbcType=BIGINT},
      check_time = #{record.checkTime,jdbcType=TIMESTAMP},
      remark = #{record.remark,jdbcType=VARCHAR},
      out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
      out_refund_no = #{record.outRefundNo,jdbcType=VARCHAR},
      refund_id = #{record.refundId,jdbcType=VARCHAR},
      pay_mark = #{record.payMark,jdbcType=VARCHAR},
      refund_account = #{record.refundAccount,jdbcType=VARCHAR},
      currency = #{record.currency,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vc.thinker.cabbage.user.model.UserDepositLog">
    update user_deposit_log
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=BIGINT},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=CHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dealBy != null">
        deal_by = #{dealBy,jdbcType=BIGINT},
      </if>
      <if test="checkTime != null">
        check_time = #{checkTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="outTradeNo != null">
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="outRefundNo != null">
        out_refund_no = #{outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="refundId != null">
        refund_id = #{refundId,jdbcType=VARCHAR},
      </if>
      <if test="payMark != null">
        pay_mark = #{payMark,jdbcType=VARCHAR},
      </if>
      <if test="refundAccount != null">
        refund_account = #{refundAccount,jdbcType=VARCHAR},
      </if>
      <if test="currency != null">
        currency = #{currency,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="vc.thinker.cabbage.user.model.UserDepositLog">
    update user_deposit_log
    set uid = #{uid,jdbcType=BIGINT},
      amount = #{amount,jdbcType=DECIMAL},
      type = #{type,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      deal_by = #{dealBy,jdbcType=BIGINT},
      check_time = #{checkTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR},
      out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      out_refund_no = #{outRefundNo,jdbcType=VARCHAR},
      refund_id = #{refundId,jdbcType=VARCHAR},
      pay_mark = #{payMark,jdbcType=VARCHAR},
      refund_account = #{refundAccount,jdbcType=VARCHAR},
      currency = #{currency,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>