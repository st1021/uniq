<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vc.thinker.cabbage.user.mapper.UserMoneyRechargeMapper">
  <resultMap id="BaseResultMap" type="vc.thinker.cabbage.user.model.UserMoneyRecharge">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="sn" jdbcType="VARCHAR" property="sn" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="payment_type" jdbcType="VARCHAR" property="paymentType" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
    <result column="out_order_id" jdbcType="VARCHAR" property="outOrderId" />
    <result column="pay_order_code" jdbcType="VARCHAR" property="payOrderCode" />
    <result column="cash_fee" jdbcType="DECIMAL" property="cashFee" />
    <result column="pay_amount" jdbcType="DECIMAL" property="payAmount" />
    <result column="send_amount" jdbcType="DECIMAL" property="sendAmount" />
    <result column="currency" jdbcType="VARCHAR" property="currency" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BOResultMap" type="vc.thinker.cabbage.user.bo.UserMoneyRechargeBO" />
  
  <resultMap id="CountStatsMap" type="vc.thinker.cabbage.stats.bo.CountStatsBO" />
  
  <select id="balanceStas" resultMap="CountStatsMap">
  		select
			<if test="vo.statsType!=null and vo.statsType==&quot;1&quot; ">
				DATE_FORMAT(create_time, '%m') AS statsTime,
			</if>
			<if test="vo.statsType!=null and vo.statsType==&quot;2&quot; ">
				DATE_FORMAT(create_time, '%d') AS statsTime,
			</if>
			sum(amount) deposit
		FROM
			user_money_recharge 
			where 
				status = 2
				<if test="vo.statsType!=null and vo.statsType==&quot;1&quot; ">
					and DATE_FORMAT(create_time, '%Y') = #{vo.time}
				</if>
				<if test="vo.statsType!=null and vo.statsType==&quot;2&quot; ">
					and DATE_FORMAT(create_time, '%Y-%m') = #{vo.time}
				</if>
		 group by statsTime 
  </select>
  
  <select id="sumByDate" resultType="DECIMAL">
  		select sum(amount) from user_money_recharge where status = 2
  		<if test="null != date and '' != date">
  			AND DATE_FORMAT(pay_time,'%Y-%m-%d') = #{date}
  		</if>
  </select>
  <select id="findPageByVo" resultMap="BOResultMap">
		select 
			r.*,m.nickname,m.mobile,m.name,m.currency
		from 
			user_money_recharge r left join user_member m on r.user_id = m.uid
		where 
			r.status = 2
			<if test="null != vo.name and '' != vo.name">
				and m.name like concat('%', #{vo.name}, '%')
			</if>
			<if test="null != vo.nickname and '' != vo.nickname">
				and m.nickname like concat('%', #{vo.nickname}, '%')
			</if>
			<if test="null != vo.mobile and '' != vo.mobile">
  				and m.mobile like  concat('%', #{vo.mobile}, '%')
  			</if>
  			<if test="null != vo.status and '' != vo.status">
  				and r.status = #{vo.status}
  			</if>
  			<if test="null != vo.ltTime">
  				and r.pay_time <![CDATA[ <= ]]> #{vo.ltTime}
  			</if>
  			<if test="null != vo.gtTime">
  				and r.pay_time <![CDATA[ >= ]]> #{vo.gtTime} 
  			</if>
  			<if test="null != vo.payOrderCode and '' != vo.payOrderCode">
  				and r.pay_order_code like concat('%', #{vo.payOrderCode}, '%')
  			</if>
  			<if test="null != vo.outOrderId and '' != vo.outOrderId">
  				and r.out_order_id like concat('%', #{vo.outOrderId}, '%')
  			</if>
  			<if test="null != vo.paymentType and '' != vo.paymentType">
  				and r.payment_type = #{vo.paymentType}
  			</if>
		order by r.pay_time desc 
  </select>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, sn, amount, payment_type, user_id, status, pay_time, create_time, is_deleted, 
    out_order_id, pay_order_code, cash_fee, pay_amount, send_amount, currency
  </sql>
  <select id="selectByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyRechargeExample" resultMap="BOResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_money_recharge
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      limit ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BOResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_money_recharge
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_money_recharge
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyRechargeExample">
    delete from user_money_recharge
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="vc.thinker.cabbage.user.model.UserMoneyRecharge" useGeneratedKeys="true">
    insert into user_money_recharge (id, sn, amount, 
      payment_type, user_id, status, 
      pay_time, create_time, is_deleted, 
      out_order_id, pay_order_code, cash_fee, 
      pay_amount, send_amount, currency
      )
    values (#{id,jdbcType=BIGINT}, #{sn,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, 
      #{paymentType,jdbcType=VARCHAR}, #{userId,jdbcType=BIGINT}, #{status,jdbcType=INTEGER}, 
      #{payTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=BIT}, 
      #{outOrderId,jdbcType=VARCHAR}, #{payOrderCode,jdbcType=VARCHAR}, #{cashFee,jdbcType=DECIMAL}, 
      #{payAmount,jdbcType=DECIMAL}, #{sendAmount,jdbcType=DECIMAL}, #{currency,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="vc.thinker.cabbage.user.model.UserMoneyRecharge" useGeneratedKeys="true">
    insert into user_money_recharge
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="sn != null">
        sn,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="paymentType != null">
        payment_type,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="payTime != null">
        pay_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="outOrderId != null">
        out_order_id,
      </if>
      <if test="payOrderCode != null">
        pay_order_code,
      </if>
      <if test="cashFee != null">
        cash_fee,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="sendAmount != null">
        send_amount,
      </if>
      <if test="currency != null">
        currency,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="sn != null">
        #{sn,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null">
        #{paymentType,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
      <if test="outOrderId != null">
        #{outOrderId,jdbcType=VARCHAR},
      </if>
      <if test="payOrderCode != null">
        #{payOrderCode,jdbcType=VARCHAR},
      </if>
      <if test="cashFee != null">
        #{cashFee,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null">
        #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="sendAmount != null">
        #{sendAmount,jdbcType=DECIMAL},
      </if>
      <if test="currency != null">
        #{currency,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyRechargeExample" resultType="java.lang.Integer">
    select count(*) from user_money_recharge
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_money_recharge
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.sn != null">
        sn = #{record.sn,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.paymentType != null">
        payment_type = #{record.paymentType,jdbcType=VARCHAR},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.payTime != null">
        pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
      <if test="record.outOrderId != null">
        out_order_id = #{record.outOrderId,jdbcType=VARCHAR},
      </if>
      <if test="record.payOrderCode != null">
        pay_order_code = #{record.payOrderCode,jdbcType=VARCHAR},
      </if>
      <if test="record.cashFee != null">
        cash_fee = #{record.cashFee,jdbcType=DECIMAL},
      </if>
      <if test="record.payAmount != null">
        pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.sendAmount != null">
        send_amount = #{record.sendAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.currency != null">
        currency = #{record.currency,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_money_recharge
    set id = #{record.id,jdbcType=BIGINT},
      sn = #{record.sn,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      payment_type = #{record.paymentType,jdbcType=VARCHAR},
      user_id = #{record.userId,jdbcType=BIGINT},
      status = #{record.status,jdbcType=INTEGER},
      pay_time = #{record.payTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      out_order_id = #{record.outOrderId,jdbcType=VARCHAR},
      pay_order_code = #{record.payOrderCode,jdbcType=VARCHAR},
      cash_fee = #{record.cashFee,jdbcType=DECIMAL},
      pay_amount = #{record.payAmount,jdbcType=DECIMAL},
      send_amount = #{record.sendAmount,jdbcType=DECIMAL},
      currency = #{record.currency,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vc.thinker.cabbage.user.model.UserMoneyRecharge">
    update user_money_recharge
    <set>
      <if test="sn != null">
        sn = #{sn,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="paymentType != null">
        payment_type = #{paymentType,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="outOrderId != null">
        out_order_id = #{outOrderId,jdbcType=VARCHAR},
      </if>
      <if test="payOrderCode != null">
        pay_order_code = #{payOrderCode,jdbcType=VARCHAR},
      </if>
      <if test="cashFee != null">
        cash_fee = #{cashFee,jdbcType=DECIMAL},
      </if>
      <if test="payAmount != null">
        pay_amount = #{payAmount,jdbcType=DECIMAL},
      </if>
      <if test="sendAmount != null">
        send_amount = #{sendAmount,jdbcType=DECIMAL},
      </if>
      <if test="currency != null">
        currency = #{currency,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="vc.thinker.cabbage.user.model.UserMoneyRecharge">
    update user_money_recharge
    set sn = #{sn,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      payment_type = #{paymentType,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER},
      pay_time = #{payTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=BIT},
      out_order_id = #{outOrderId,jdbcType=VARCHAR},
      pay_order_code = #{payOrderCode,jdbcType=VARCHAR},
      cash_fee = #{cashFee,jdbcType=DECIMAL},
      pay_amount = #{payAmount,jdbcType=DECIMAL},
      send_amount = #{sendAmount,jdbcType=DECIMAL},
      currency = #{currency,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="chargedUserNum" resultType="java.lang.Integer">
    select count(*) from (select * from user_money_recharge where status = 2 GROUP BY user_id) as tmp;
  </select>
  
  <select id="totalCharged" resultType="java.lang.Double">
     select sum(pay_amount) from `user_money_recharge` where status = 2;
  </select>
</mapper>