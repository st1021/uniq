<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vc.thinker.cabbage.user.mapper.UserMoneyMapper">
  <resultMap id="BaseResultMap" type="vc.thinker.cabbage.user.model.UserMoney">
    <id column="uid" jdbcType="BIGINT" property="uid" />
    <result column="available_balance" jdbcType="DECIMAL" property="availableBalance" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="currency" jdbcType="VARCHAR" property="currency" />
    <result column="rebate_money" jdbcType="DECIMAL" property="rebateMoney" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BOResultMap" type="vc.thinker.cabbage.user.bo.UserMoneyBO" />
  
  <select id="sumRebateMoney" resultMap="BOResultMap">
  		select sum(rebate_money) rebate_money ,currency from user_money group by currency
  </select>
  
  <select id="selectSumBalance" resultType="java.math.BigDecimal">
	    select sum(available_balance) from user_money
	  </select>
	  
  	<update id="addMoney" parameterType="map">
		update user_money set available_balance=available_balance+#{money} 
		where uid=#{uid}
	</update>
	
	<update id="subtractMoney" parameterType="map">
		update user_money set available_balance=available_balance-#{money} 
		where uid=#{uid}
	</update>
	
	<update id="addRebateMoney" parameterType="map">
		update user_money set rebate_money=rebate_money+#{money} 
		where uid=#{uid}
	</update>
	<update id="substractRebateMoney" parameterType="map">
		update user_money set rebate_money=rebate_money-#{money} 
		where uid=#{uid}
	</update>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, available_balance, password, currency, rebate_money
  </sql>
  <select id="selectByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyExample" resultMap="BOResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_money
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      limit ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BOResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_money
    where uid = #{uid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_money
    where uid = #{uid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyExample">
    delete from user_money
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="vc.thinker.cabbage.user.model.UserMoney">
    insert into user_money (uid, available_balance, password, 
      currency, rebate_money)
    values (#{uid,jdbcType=BIGINT}, #{availableBalance,jdbcType=DECIMAL}, #{password,jdbcType=VARCHAR}, 
      #{currency,jdbcType=VARCHAR}, #{rebateMoney,jdbcType=DECIMAL})
  </insert>
  
  <insert id="insertSelective" parameterType="vc.thinker.cabbage.user.model.UserMoney">
    insert into user_money
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="availableBalance != null">
        available_balance,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="currency != null">
        currency,
      </if>
      <if test="rebateMoney != null">
        rebate_money,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="availableBalance != null">
        #{availableBalance,jdbcType=DECIMAL},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="currency != null">
        #{currency,jdbcType=VARCHAR},
      </if>
      <if test="rebateMoney != null">
        #{rebateMoney,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  
  <insert id="insertOrUpdate" parameterType="vc.thinker.cabbage.user.model.UserMoney">
    insert into user_money
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="availableBalance != null">
        available_balance,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="currency != null">
        currency,
      </if>
      <if test="rebateMoney != null">
        rebate_money,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="availableBalance != null">
        #{availableBalance,jdbcType=DECIMAL},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="currency != null">
        #{currency,jdbcType=VARCHAR},
      </if>
      <if test="rebateMoney != null">
        #{rebateMoney,jdbcType=DECIMAL},
      </if>
    </trim>
    ON DUPLICATE KEY UPDATE available_balance = available_balance + #{availableBalance,jdbcType=DECIMAL}
  </insert>
  <select id="countByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyExample" resultType="java.lang.Integer">
    select count(*) from user_money
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_money
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.availableBalance != null">
        available_balance = #{record.availableBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.currency != null">
        currency = #{record.currency,jdbcType=VARCHAR},
      </if>
      <if test="record.rebateMoney != null">
        rebate_money = #{record.rebateMoney,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_money
    set uid = #{record.uid,jdbcType=BIGINT},
      available_balance = #{record.availableBalance,jdbcType=DECIMAL},
      password = #{record.password,jdbcType=VARCHAR},
      currency = #{record.currency,jdbcType=VARCHAR},
      rebate_money = #{record.rebateMoney,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vc.thinker.cabbage.user.model.UserMoney">
    update user_money
    <set>
      <if test="availableBalance != null">
        available_balance = #{availableBalance,jdbcType=DECIMAL},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="currency != null">
        currency = #{currency,jdbcType=VARCHAR},
      </if>
      <if test="rebateMoney != null">
        rebate_money = #{rebateMoney,jdbcType=DECIMAL},
      </if>
    </set>
    where uid = #{uid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="vc.thinker.cabbage.user.model.UserMoney">
    update user_money
    set available_balance = #{availableBalance,jdbcType=DECIMAL},
      password = #{password,jdbcType=VARCHAR},
      currency = #{currency,jdbcType=VARCHAR},
      rebate_money = #{rebateMoney,jdbcType=DECIMAL}
    where uid = #{uid,jdbcType=BIGINT}
  </update>
</mapper>