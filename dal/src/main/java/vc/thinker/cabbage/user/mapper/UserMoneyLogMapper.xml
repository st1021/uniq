<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vc.thinker.cabbage.user.mapper.UserMoneyLogMapper">
  <resultMap id="BaseResultMap" type="vc.thinker.cabbage.user.model.UserMoneyLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="log_user_id" jdbcType="BIGINT" property="logUserId" />
    <result column="log_source_id" jdbcType="BIGINT" property="logSourceId" />
    <result column="log_type" jdbcType="VARCHAR" property="logType" />
    <result column="log_amount" jdbcType="DECIMAL" property="logAmount" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
    <result column="out_order_id" jdbcType="VARCHAR" property="outOrderId" />
    <result column="old_log_amount" jdbcType="DECIMAL" property="oldLogAmount" />
    <result column="old_log_currency" jdbcType="VARCHAR" property="oldLogCurrency" />
    <result column="exchange_rate" jdbcType="DECIMAL" property="exchangeRate" />
    <result column="log_currency" jdbcType="VARCHAR" property="logCurrency" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="BOResultMap" type="vc.thinker.cabbage.user.bo.UserMoneyLogBO" />
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="vc.thinker.cabbage.user.model.UserMoneyLog">
    <result column="log_info" jdbcType="LONGVARCHAR" property="logInfo" />
  </resultMap>
  <select id="findPageByVO" parameterType="vc.thinker.cabbage.user.vo.UserMoneyLogVO" resultMap="BOResultMap">
    	select l.*, u.login_name 
    	from user_money_log l left join sys_user_account u on l.log_user_id = u.uid AND u.account_type = 2
    	where l.is_deleted = 0  
    	<if test="vo.uid != null">
    		AND l.log_user_id = #{vo.uid}
    	</if>
    	<if test="vo.logType != null and vo.logType != ''">
    		AND l.log_type = #{vo.logType}
    	</if>
    	<if test="vo.loginName != null and vo.loginName != ''">
    		AND u.login_name = #{vo.loginName}
    	</if>
    	<if test="vo.userId != null and vo.userId != ''">
    		AND l.log_user_id = #{vo.userId}
    	</if>
    	<if test="vo.startTime != null and vo.startTime != ''">
    		AND DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ >= ]]> DATE_FORMAT(#{vo.startTime} ,'%Y-%m-%d')
    	</if>
    	<if test="vo.endTime != null and vo.endTime != ''">
    		AND DATE_FORMAT(l.create_time ,'%Y-%m-%d') <![CDATA[ <= ]]> DATE_FORMAT(#{vo.endTime} ,'%Y-%m-%d')
    	</if>
    	<if test="vo.ltTime != null">
    		AND l.create_time <![CDATA[ < ]]> #{vo.ltTime}
    	</if>
    	order by l.create_time desc
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, log_user_id, log_source_id, log_type, log_amount, create_time, is_deleted, out_order_id, 
    old_log_amount, old_log_currency, exchange_rate, log_currency
  </sql>
  <sql id="Blob_Column_List">
    log_info
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="vc.thinker.cabbage.user.model.UserMoneyLogExample" resultMap="BOResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user_money_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyLogExample" resultMap="BOResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_money_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      limit ${limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BOResultMap">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from user_money_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from user_money_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyLogExample">
    delete from user_money_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyProperty="id" parameterType="vc.thinker.cabbage.user.model.UserMoneyLog" useGeneratedKeys="true">
    insert into user_money_log (id, log_user_id, log_source_id, 
      log_type, log_amount, create_time, 
      is_deleted, out_order_id, old_log_amount, 
      old_log_currency, exchange_rate, log_currency, 
      log_info)
    values (#{id,jdbcType=BIGINT}, #{logUserId,jdbcType=BIGINT}, #{logSourceId,jdbcType=BIGINT}, 
      #{logType,jdbcType=VARCHAR}, #{logAmount,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, 
      #{isDeleted,jdbcType=BIT}, #{outOrderId,jdbcType=VARCHAR}, #{oldLogAmount,jdbcType=DECIMAL}, 
      #{oldLogCurrency,jdbcType=VARCHAR}, #{exchangeRate,jdbcType=DECIMAL}, #{logCurrency,jdbcType=VARCHAR}, 
      #{logInfo,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" keyProperty="id" parameterType="vc.thinker.cabbage.user.model.UserMoneyLog" useGeneratedKeys="true">
    insert into user_money_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="logUserId != null">
        log_user_id,
      </if>
      <if test="logSourceId != null">
        log_source_id,
      </if>
      <if test="logType != null">
        log_type,
      </if>
      <if test="logAmount != null">
        log_amount,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="outOrderId != null">
        out_order_id,
      </if>
      <if test="oldLogAmount != null">
        old_log_amount,
      </if>
      <if test="oldLogCurrency != null">
        old_log_currency,
      </if>
      <if test="exchangeRate != null">
        exchange_rate,
      </if>
      <if test="logCurrency != null">
        log_currency,
      </if>
      <if test="logInfo != null">
        log_info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="logUserId != null">
        #{logUserId,jdbcType=BIGINT},
      </if>
      <if test="logSourceId != null">
        #{logSourceId,jdbcType=BIGINT},
      </if>
      <if test="logType != null">
        #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logAmount != null">
        #{logAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
      <if test="outOrderId != null">
        #{outOrderId,jdbcType=VARCHAR},
      </if>
      <if test="oldLogAmount != null">
        #{oldLogAmount,jdbcType=DECIMAL},
      </if>
      <if test="oldLogCurrency != null">
        #{oldLogCurrency,jdbcType=VARCHAR},
      </if>
      <if test="exchangeRate != null">
        #{exchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="logCurrency != null">
        #{logCurrency,jdbcType=VARCHAR},
      </if>
      <if test="logInfo != null">
        #{logInfo,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="vc.thinker.cabbage.user.model.UserMoneyLogExample" resultType="java.lang.Integer">
    select count(*) from user_money_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_money_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.logUserId != null">
        log_user_id = #{record.logUserId,jdbcType=BIGINT},
      </if>
      <if test="record.logSourceId != null">
        log_source_id = #{record.logSourceId,jdbcType=BIGINT},
      </if>
      <if test="record.logType != null">
        log_type = #{record.logType,jdbcType=VARCHAR},
      </if>
      <if test="record.logAmount != null">
        log_amount = #{record.logAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
      <if test="record.outOrderId != null">
        out_order_id = #{record.outOrderId,jdbcType=VARCHAR},
      </if>
      <if test="record.oldLogAmount != null">
        old_log_amount = #{record.oldLogAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.oldLogCurrency != null">
        old_log_currency = #{record.oldLogCurrency,jdbcType=VARCHAR},
      </if>
      <if test="record.exchangeRate != null">
        exchange_rate = #{record.exchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="record.logCurrency != null">
        log_currency = #{record.logCurrency,jdbcType=VARCHAR},
      </if>
      <if test="record.logInfo != null">
        log_info = #{record.logInfo,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update user_money_log
    set id = #{record.id,jdbcType=BIGINT},
      log_user_id = #{record.logUserId,jdbcType=BIGINT},
      log_source_id = #{record.logSourceId,jdbcType=BIGINT},
      log_type = #{record.logType,jdbcType=VARCHAR},
      log_amount = #{record.logAmount,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      out_order_id = #{record.outOrderId,jdbcType=VARCHAR},
      old_log_amount = #{record.oldLogAmount,jdbcType=DECIMAL},
      old_log_currency = #{record.oldLogCurrency,jdbcType=VARCHAR},
      exchange_rate = #{record.exchangeRate,jdbcType=DECIMAL},
      log_currency = #{record.logCurrency,jdbcType=VARCHAR},
      log_info = #{record.logInfo,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_money_log
    set id = #{record.id,jdbcType=BIGINT},
      log_user_id = #{record.logUserId,jdbcType=BIGINT},
      log_source_id = #{record.logSourceId,jdbcType=BIGINT},
      log_type = #{record.logType,jdbcType=VARCHAR},
      log_amount = #{record.logAmount,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      out_order_id = #{record.outOrderId,jdbcType=VARCHAR},
      old_log_amount = #{record.oldLogAmount,jdbcType=DECIMAL},
      old_log_currency = #{record.oldLogCurrency,jdbcType=VARCHAR},
      exchange_rate = #{record.exchangeRate,jdbcType=DECIMAL},
      log_currency = #{record.logCurrency,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vc.thinker.cabbage.user.model.UserMoneyLog">
    update user_money_log
    <set>
      <if test="logUserId != null">
        log_user_id = #{logUserId,jdbcType=BIGINT},
      </if>
      <if test="logSourceId != null">
        log_source_id = #{logSourceId,jdbcType=BIGINT},
      </if>
      <if test="logType != null">
        log_type = #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logAmount != null">
        log_amount = #{logAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="outOrderId != null">
        out_order_id = #{outOrderId,jdbcType=VARCHAR},
      </if>
      <if test="oldLogAmount != null">
        old_log_amount = #{oldLogAmount,jdbcType=DECIMAL},
      </if>
      <if test="oldLogCurrency != null">
        old_log_currency = #{oldLogCurrency,jdbcType=VARCHAR},
      </if>
      <if test="exchangeRate != null">
        exchange_rate = #{exchangeRate,jdbcType=DECIMAL},
      </if>
      <if test="logCurrency != null">
        log_currency = #{logCurrency,jdbcType=VARCHAR},
      </if>
      <if test="logInfo != null">
        log_info = #{logInfo,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="vc.thinker.cabbage.user.model.UserMoneyLog">
    update user_money_log
    set log_user_id = #{logUserId,jdbcType=BIGINT},
      log_source_id = #{logSourceId,jdbcType=BIGINT},
      log_type = #{logType,jdbcType=VARCHAR},
      log_amount = #{logAmount,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=BIT},
      out_order_id = #{outOrderId,jdbcType=VARCHAR},
      old_log_amount = #{oldLogAmount,jdbcType=DECIMAL},
      old_log_currency = #{oldLogCurrency,jdbcType=VARCHAR},
      exchange_rate = #{exchangeRate,jdbcType=DECIMAL},
      log_currency = #{logCurrency,jdbcType=VARCHAR},
      log_info = #{logInfo,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="vc.thinker.cabbage.user.model.UserMoneyLog">
    update user_money_log
    set log_user_id = #{logUserId,jdbcType=BIGINT},
      log_source_id = #{logSourceId,jdbcType=BIGINT},
      log_type = #{logType,jdbcType=VARCHAR},
      log_amount = #{logAmount,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=BIT},
      out_order_id = #{outOrderId,jdbcType=VARCHAR},
      old_log_amount = #{oldLogAmount,jdbcType=DECIMAL},
      old_log_currency = #{oldLogCurrency,jdbcType=VARCHAR},
      exchange_rate = #{exchangeRate,jdbcType=DECIMAL},
      log_currency = #{logCurrency,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>